# listen to 8443
Listen 8443 https

# set global server name
ServerName ${HOSTNAME}

# copied from default ssl.conf
SSLRandomSeed startup file:/dev/urandom 256
SSLRandomSeed connect builtin
SSLCryptoDevice builtin

# set log to stdout/stderr
LogLevel ${PROXY_LOG_LEVEL}
ErrorLog /dev/stderr
TransferLog /dev/stdout

# module
LoadModule request_module modules/mod_request.so
LoadModule ldap_module /opt/rh/httpd24/root/usr/lib64/httpd/modules/mod_ldap.so
LoadModule authnz_ldap_module /opt/rh/httpd24/root/usr/lib64/httpd/modules/mod_authnz_ldap.so

# set ssl session cache location
SSLSessionCache "shmcb:logs/ssl_cache(512000)"
SSLSessionCacheTimeout 300

# Nothing needs to be served over HTTP. This virtual host simply redirects to
# HTTPS.
<VirtualHost *:8080>
  DocumentRoot /var/www/html
  RewriteEngine On
  RewriteRule ^(.*)$ https://%{PIVPROXY_PUBLIC_URL}:8443$1 [R,L]
</VirtualHost>

<VirtualHost *:8443>
  # server name and aliases for SNI and for client contact
  ServerName ${PIVPROXY_PUBLIC_URL}
  ServerAlias ${BASE_NAME}.${CURRENT_NAMESPACE}.svc,${HOSTNAME},${BASE_NAME}.${CURRENT_NAMESPACE}.svc.cluster.local,${BASE_NAME}

  # root where documents are served from
  DocumentRoot /var/www/html

  # enable the SSL engine and set the SSL TLS level and cipher suite
  SSLEngine on
  SSLProtocol +TLSv1.2
  SSLCipherSuite HIGH:!aNULL:!MD5
  SSLHonorCipherOrder on

  # set the certificate and private key for this service/route
  SSLCertificateFile /secrets/tls.crt
  SSLCertificateKeyFile /secrets/tls.key

  # This is the CA against which user's certificates will be checked.
  SSLCACertificateFile /piv/smartcard-ca.crt

  # set up variables and export them
  SSLOptions +StdEnvVars +ExportCertData

  # used in the individual location segments below, not at the root
  #SSLVerifyClient require

  # max verification depth
  SSLVerifyDepth 5

  # turn on the proxy engine for the clients
  SSLProxyEngine on
  # set the proxy to use only TLSv1.2
  SSLProxyProtocol +TLSv1.2
  # set proxy verify depth
  SSLProxyVerifyDepth 5

  # created (as in the docs) by creating a proxy CA that is signed by the openshift master CA and then using that to create client crt and key for this node
  SSLProxyCACertificateFile /client_secrets/master-ca.crt
  SSLProxyMachineCertificateFile /client_secrets/piv_proxy.pem

  # Send all requests to the console
  RewriteEngine On
  RewriteRule ^/console(.*)$ https://%{HTTP_HOST}/console$1 [R,L]

  # In order to using the challenging-proxy an X-Csrf-Token must be present.
  RewriteCond %{REQUEST_URI} ^/challenging-proxy
  RewriteCond %{HTTP:X-Csrf-Token} ^$ [NC]
  RewriteRule ^.* - [F,L]

  # allow rewrite rules access to the tolower function
  RewriteMap lc int:tolower

  <Location /challenging-proxy/oauth/authorize>
    SSLVerifyClient require
    SSLUserName SSL_CLIENT_S_DN_CN

    # authentication client id
    AuthName openshift
    # proxy back to authorize with the credential details
    ProxyPass https://${MASTER_PUBLIC_URL}/oauth/authorize
  </Location>

  <Location /login-proxy/oauth/authorize>
    SSLVerifyClient require
    SSLUserName SSL_CLIENT_S_DN_CN

    # authentication client id
    AuthName openshift
    # proxy back to authorize with the credential details
    ProxyPass https://${MASTER_PUBLIC_URL}/oauth/authorize
  </Location>

  <ProxyMatch /oauth/authorize>
    SSLVerifyClient require
    SSLUserName SSL_CLIENT_S_DN_CN

    AuthType Basic
    AuthName "LDAP"
    #AuthLDAPInitialBindAsUser on
    #AuthLDAPInitialBindPattern (.+) $1
    AuthLDAPBindDN "CN=Paul C. Begovich,CN=Users,DC=win12,DC=rhc-lab,DC=iad,DC=redhat,DC=com"
    AuthLDAPBindPassword "ODIEpassphrase123!"
    AuthBasicProvider ldap
    AuthLDAPURL "ldap://ad1.win12.rhc-lab.iad.redhat.com/cn=users,dc=win12,dc=rhc-lab,dc=iad,dc=redhat,dc=com?uid?sub?"
    #Require ldap-filter "(&(objectclass=user)(memberof=
    Require ldap-group CN=readonly,OU=OCP,DC=win12,DC=rhc-lab,DC=iad,DC=redhat,DC=com
    #Require valid-user

    # rewrite the SSL_CLIENT_SAN_OTHER_msUPN_0 to lower case so that we can use it
    # for some reason in HTTPD 2.4.6 the ENV: reference won't work even with +StdEnvVars
    # and you need to use the SSL: reference
    # the variable looks like `abc1@agency.gov` from the smart card's certificate
    RewriteRule ^.* - [E=X_LOWER_USER:${lc:%{SSL:SSL_CLIENT_S_DN_CN}},L]

    # use the lowercase variable from the cert (now `abc1@agency.gov`)
    RequestHeader set X-Remote-User "%{X_LOWER_USER}e" env=X_LOWER_USER

    # rewrite the above variable to strip the `@agency.gov` portion
    RequestHeader edit X-Remote-User-Display-Name "([^@]+)@.*" $1

  </ProxyMatch>
</VirtualHost>
