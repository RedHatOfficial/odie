- name: Overwrite default app_shutdown_timeout
  set_fact: app_shutdown_timeout="{{ app.config.properties.app_shutdown_timeout }}"
  when: app.config.properties.app_shutdown_timeout is defined

- name: Check if application postgresql exists and has replicas
  command: "oc get deploymentconfig {{ app.name }}-postgresql -n {{ project.name }} -o jsonpath='{.items[*].status.replicas}'"
  ignore_errors: true
  register: postgresql_oc_get_output

- block:
  - name: Scale down application postgresql DC
    command: "oc scale deploymentconfig {{ app.name }}-postgresql -n {{ project.name }} --replicas=0"
    ignore_errors: true

  - name: Check if the application postgresql RC has hit a replica count of 0
    shell: " oc get deploymentconfig {{ app.name }}-postgresql -n {{ project.name }} --template='{{ '{{' }} .status.replicas {{ '}}' }}'"
    register: postgres_replica_count
    until: postgres_replica_count.stdout == "0"
    retries: "{{ ( app_shutdown_timeout | int / 5 ) | round(0, 'ceil') | int }}"
    delay: 5
    ignore_errors: true
  when:
    - postgresql_oc_get_output.stderr == ""
    - postgresql_oc_get_output.stdout|int > 0

- name: Check if application  exists and has replicas
  command: "oc get deploymentconfig {{ app.name }} -n {{ project.name }} -o jsonpath='{.items[*].status.replicas}'"
  ignore_errors: true
  register: app_oc_get_output

- block:
  - name: Scale down application  DC
    command: "oc scale deploymentconfig {{ app.name }} -n {{ project.name }} --replicas=0"
    ignore_errors: true

  - name: Check if the application DC has hit a replica count of 0
    shell: " oc get deploymentconfig {{ app.name }} -n {{ project.name }} --template='{{ '{{' }} .status.replicas {{ '}}' }}'"
    register: app_replica_count
    until: app_replica_count.stdout == "0"
    retries: "{{ ( app_shutdown_timeout | int / 5 ) | round(0, 'ceil') | int }}"
    ignore_errors: true
    delay: 5
  when:
    - app_oc_get_output.stderr == ""
    - app_oc_get_output.stdout|int > 0

